// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
   field Array memory;
   field int length;
   field int max;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let max = maxLength;
      if(max>0){
        let memory=Memory.alloc(maxLength);
      }
      let length=0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      if(max>0){
        do Memory.deAlloc(memory);
      }
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
           return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
           return memory[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
           let memory[j]=c;
           return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
           let memory[length]=c;
           let length=length+1;
           return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
           let length=length-1;
           let memory[length]=0;
           return;
    }
    method int intValue0(int i) {
      var int ans;
      let ans=0;
      while((i<length) & (47<memory[i]) & (memory[i]<58)){
        let ans=ans*10+memory[i]-48;
        let i=i+1;
      }
      return ans;
    }
    /** Returns the integer value of this string,
     *  until a non-digit character is detected. */
    method int intValue() {
      if(memory[0]=45){/* - */
        return -intValue0(1);
      }
      return intValue0(0);
    }
    method void setInt0(int val) {
      var int last;
      var int c;
      let last=val-(Math.divide(val,10)*10);
      let c=last+48;
      if(val<10){
        do appendChar(c);
      }else{
        do setInt0(Math.divide(val,10));
        do appendChar(c);
      }
      return;
    }
    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
      let length=0;
      if(val>0){
        do setInt0(val);
      }else{
        do appendChar(45);/* - */
        do setInt0(-val);
      }
      return;
    }

    /** Returns the new line character. */
    function char newLine() {
             return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
             return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
             return 34;
    }
}
