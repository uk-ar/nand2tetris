// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
  static int base;
  static boolean color;
  static Array a2;
    /** Initializes the Screen. */
    function void init() {
      var int i,j;
      let j=1;
      let a2=Array.new(16);
      while(i<16){
        let a2[i]=j;
        let j=j+j;
        let i=i+1;
      }
      let base=16384;
      let color=true;
      return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
      var int i;
      let i=base;
      while(i<24576){
        let i[0]=0;
        let i=i+1;
      }
      return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
      let color=b;
      return;
    }
    function int shift(int n,int i){
      while(i>0){
        let n=n+n;
        let i=i-1;
      }
      return n;
    }
    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
      if(color){
        do Screen.drawPixelB(x,y);
      }else{
        do Screen.drawPixelW(x,y);
      }
      return;
    }
    function void drawPixelW(int x, int y) {
      var int off,mod,x16;
      let x16=x/16;
      let off=Screen.shift(y,5)+x16;
      let mod=x-Screen.shift(x16,4);
      let base[off]=(~(a2[mod]))&base[off];
      return;
    }
    function void drawPixelB(int x, int y) {
      var int off,mod,x16;
      let x16=x/16;
      let off=Screen.shift(y,5)+x16;
      let mod=x-Screen.shift(x16,4);
      let base[off]=a2[mod]|base[off];
      return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
      var int tmp,dx,dy,a,b,d;
      if(x1=x2){
        if(y1>y2){
          let tmp=y1;
          let y1=y2;
          let y2=tmp;
        }
        let y2=y2+1;
        if(color){
          while(y1<y2){
            do Screen.drawPixelB(x1,y1);
            let y1=y1+1;
          }
          return;
        }else{
          while(y1<y2){
            do Screen.drawPixelW(x1,y1);
            let y1=y1+1;
          }
          return;
        }
      }
      if(x1>x2){
        let tmp=x1;
        let x1=x2;
        let x2=tmp;

        let tmp=y1;
        let y1=y2;
        let y2=tmp;
      }
      if(y1=y2){
        let a=(x1+15)/16*16;//(0+16)/16*16=>16
        let x2=x2+1;
        if(color){
          while((x1<a) & (x1<x2)){
            do Screen.drawPixelB(x1,y1);
            let x1=x1+1;
          }
          let a=(y1*32)+(x1/16);
          while((x1+16)<x2){
            let base[a]=-1;
            let x1=x1+16;
            let a=a+1;
          }
          let x1=Math.max(x1,(x2)/16*16);//(0+16)/16*16=>16
          while(x1<x2){
            do Screen.drawPixelB(x1,y1);
            let x1=x1+1;
          }
          return;
        }else{
          while((x1<a) & (x1<x2)){
            do Screen.drawPixelW(x1,y1);
            let x1=x1+1;
          }
          let a=(y1*32)+(x1/16);
          while((x1+16)<x2){
            let base[a]=0;
            let x1=x1+16;
            let a=a+1;
          }
          let x1=Math.max(x1,(x2)/16*16);//(0+16)/16*16=>16
          while(x1<x2){
            do Screen.drawPixelW(x1,y1);
            let x1=x1+1;
          }
          return;
        }
      }
      let dx=x2-x1;
      let dy=y2-y1;
      if(dy>0){
        let x2=x2+1;
        while((x1+a)<x2){
          do Screen.drawPixel(x1+a,y1+b);
          //if(b/a>dy/dx){
          if((b*dx)-(dy*a)>0){
          //if(d>0){
            let a=a+1;
            let d=d-dy;
          }else{
            let b=b+1;
            let d=d-dx;
          }
        }
      }else{
        let x2=x2+1;
        while((x1+a)<x2){
          do Screen.drawPixel(x1+a,y1-b);
          //if(b/a>dy/dx){
          if((b*dx)+(dy*a)>0){
          //if(d>0){
            let a=a+1;
            //let d=d-dy;
          }else{
            let b=b+1;
            //let d=d-dx;
          }
        }
      }
      return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
      let y2=y2+1;
      while(y1<y2){
        do Screen.drawLine(x1,y1,x2,y1);
        let y1=y1+1;
      }
      return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
      var int a,b,d,r2;
      let b=r;//a++,b--;
      let d=(a*a)+(b*b);//a2+2a+1-a2=2a+1;b2-2b+1-b2=-2b+1
      let r2=r*r;
      while((a<(r+1)) & (b>-1)){
        if(((a*a)+(b*b))>r2){
        //if(d>r2){
          //let d=d+2*b+1;
          let b=b-1;
        }else{
          //let d=d-2*a+1;
          let a=a+1;
        }
        //(int x1, int y1, int x2, int y2) {
        do Screen.drawLine(x-a,y+b,x+a,y+b);
        do Screen.drawLine(x-a,y-b,x+a,y-b);
      }
      return;
    }
}
