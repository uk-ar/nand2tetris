@256 //0
D=A //1
@SP //2
M=D //3
@return-address0 //4
D=A //5
@SP //6
A=M //7
M=D //8
@SP //9
M=M+1 //10
@LCL //11
D=M //12
@SP //13
A=M //14
M=D //15
@SP //16
M=M+1 //17
@ARG //18
D=M //19
@SP //20
A=M //21
M=D //22
@SP //23
M=M+1 //24
@THIS //25
D=M //26
@SP //27
A=M //28
M=D //29
@SP //30
M=M+1 //31
@THAT //32
D=M //33
@SP //34
A=M //35
M=D //36
@SP //37
M=M+1 //38
@SP //39
D=M //40
@0 //41
D=D-A //42
@5 //43
D=D-A //ARG=SP-n-5 //44
@ARG //45
M=D //46
@SP //47
D=M //48
@LCL //49
M=D //50
@Sys.init //51
0;JMP //52
(return-address0)
// 
// function Sys.init 0
(Sys.init)
// push constant 4000	// test THIS and THAT context save
@4000 //53
D=A //54
@SP //55
A=M //56
M=D //57
@SP //58
M=M+1 //59
// pop pointer 0
@SP //60
M=M-1 //61
A=M //62
D=M //63
@data //64
M=D //65
@THIS //66
D=A //67
@0 //68
D=D+A //69
@address //70
M=D //71
@data //72
D=M //73
@address //74
A=M //75
M=D //76
// push constant 5000
@5000 //77
D=A //78
@SP //79
A=M //80
M=D //81
@SP //82
M=M+1 //83
// pop pointer 1
@SP //84
M=M-1 //85
A=M //86
D=M //87
@data //88
M=D //89
@THIS //90
D=A //91
@1 //92
D=D+A //93
@address //94
M=D //95
@data //96
D=M //97
@address //98
A=M //99
M=D //100
// call Sys.main 0
@return-address1 //101
D=A //102
@SP //103
A=M //104
M=D //105
@SP //106
M=M+1 //107
@LCL //108
D=M //109
@SP //110
A=M //111
M=D //112
@SP //113
M=M+1 //114
@ARG //115
D=M //116
@SP //117
A=M //118
M=D //119
@SP //120
M=M+1 //121
@THIS //122
D=M //123
@SP //124
A=M //125
M=D //126
@SP //127
M=M+1 //128
@THAT //129
D=M //130
@SP //131
A=M //132
M=D //133
@SP //134
M=M+1 //135
@SP //136
D=M //137
@0 //138
D=D-A //139
@5 //140
D=D-A //ARG=SP-n-5 //141
@ARG //142
M=D //143
@SP //144
D=M //145
@LCL //146
M=D //147
@Sys.main //148
0;JMP //149
(return-address1)
// pop temp 1
@SP //150
M=M-1 //151
A=M //152
D=M //153
@data //154
M=D //155
@R5 //156
D=A //157
@1 //158
D=D+A //159
@address //160
M=D //161
@data //162
D=M //163
@address //164
A=M //165
M=D //166
// label LOOP
(LOOP)
// goto LOOP
@LOOP //167
0;JMP //168
// function Sys.main 5
(Sys.main)
@0 //169
D=A //170
@SP //171
A=M //172
M=D //173
@SP //174
M=M+1 //175
@0 //176
D=A //177
@SP //178
A=M //179
M=D //180
@SP //181
M=M+1 //182
@0 //183
D=A //184
@SP //185
A=M //186
M=D //187
@SP //188
M=M+1 //189
@0 //190
D=A //191
@SP //192
A=M //193
M=D //194
@SP //195
M=M+1 //196
@0 //197
D=A //198
@SP //199
A=M //200
M=D //201
@SP //202
M=M+1 //203
// push constant 4001
@4001 //204
D=A //205
@SP //206
A=M //207
M=D //208
@SP //209
M=M+1 //210
// pop pointer 0
@SP //211
M=M-1 //212
A=M //213
D=M //214
@data //215
M=D //216
@THIS //217
D=A //218
@0 //219
D=D+A //220
@address //221
M=D //222
@data //223
D=M //224
@address //225
A=M //226
M=D //227
// push constant 5001
@5001 //228
D=A //229
@SP //230
A=M //231
M=D //232
@SP //233
M=M+1 //234
// pop pointer 1
@SP //235
M=M-1 //236
A=M //237
D=M //238
@data //239
M=D //240
@THIS //241
D=A //242
@1 //243
D=D+A //244
@address //245
M=D //246
@data //247
D=M //248
@address //249
A=M //250
M=D //251
// push constant 200
@200 //252
D=A //253
@SP //254
A=M //255
M=D //256
@SP //257
M=M+1 //258
// pop local 1
@SP //259
M=M-1 //260
A=M //261
D=M //262
@data //263
M=D //264
@LCL //265
D=M //266
@1 //267
D=D+A //268
@address //269
M=D //270
@data //271
D=M //272
@address //273
A=M //274
M=D //275
// push constant 40
@40 //276
D=A //277
@SP //278
A=M //279
M=D //280
@SP //281
M=M+1 //282
// pop local 2
@SP //283
M=M-1 //284
A=M //285
D=M //286
@data //287
M=D //288
@LCL //289
D=M //290
@2 //291
D=D+A //292
@address //293
M=D //294
@data //295
D=M //296
@address //297
A=M //298
M=D //299
// push constant 6
@6 //300
D=A //301
@SP //302
A=M //303
M=D //304
@SP //305
M=M+1 //306
// pop local 3
@SP //307
M=M-1 //308
A=M //309
D=M //310
@data //311
M=D //312
@LCL //313
D=M //314
@3 //315
D=D+A //316
@address //317
M=D //318
@data //319
D=M //320
@address //321
A=M //322
M=D //323
// push constant 123
@123 //324
D=A //325
@SP //326
A=M //327
M=D //328
@SP //329
M=M+1 //330
// call Sys.add12 1
@return-address2 //331
D=A //332
@SP //333
A=M //334
M=D //335
@SP //336
M=M+1 //337
@LCL //338
D=M //339
@SP //340
A=M //341
M=D //342
@SP //343
M=M+1 //344
@ARG //345
D=M //346
@SP //347
A=M //348
M=D //349
@SP //350
M=M+1 //351
@THIS //352
D=M //353
@SP //354
A=M //355
M=D //356
@SP //357
M=M+1 //358
@THAT //359
D=M //360
@SP //361
A=M //362
M=D //363
@SP //364
M=M+1 //365
@SP //366
D=M //367
@1 //368
D=D-A //369
@5 //370
D=D-A //ARG=SP-n-5 //371
@ARG //372
M=D //373
@SP //374
D=M //375
@LCL //376
M=D //377
@Sys.add12 //378
0;JMP //379
(return-address2)
// pop temp 0
@SP //380
M=M-1 //381
A=M //382
D=M //383
@data //384
M=D //385
@R5 //386
D=A //387
@0 //388
D=D+A //389
@address //390
M=D //391
@data //392
D=M //393
@address //394
A=M //395
M=D //396
// push local 0
@LCL //397
D=M //398
@0 //399
A=D+A //400
D=M //401
@SP //402
A=M //403
M=D //404
@SP //405
M=M+1 //406
// push local 1
@LCL //407
D=M //408
@1 //409
A=D+A //410
D=M //411
@SP //412
A=M //413
M=D //414
@SP //415
M=M+1 //416
// push local 2
@LCL //417
D=M //418
@2 //419
A=D+A //420
D=M //421
@SP //422
A=M //423
M=D //424
@SP //425
M=M+1 //426
// push local 3
@LCL //427
D=M //428
@3 //429
A=D+A //430
D=M //431
@SP //432
A=M //433
M=D //434
@SP //435
M=M+1 //436
// push local 4
@LCL //437
D=M //438
@4 //439
A=D+A //440
D=M //441
@SP //442
A=M //443
M=D //444
@SP //445
M=M+1 //446
// add
@SP //447
M=M-1 //448
A=M //449
D=M //450
@SP //451
A=M-1 //452
D=M+D //453
@SP //454
A=M-1 //455
M=D //456
// add
@SP //457
M=M-1 //458
A=M //459
D=M //460
@SP //461
A=M-1 //462
D=M+D //463
@SP //464
A=M-1 //465
M=D //466
// add
@SP //467
M=M-1 //468
A=M //469
D=M //470
@SP //471
A=M-1 //472
D=M+D //473
@SP //474
A=M-1 //475
M=D //476
// add
@SP //477
M=M-1 //478
A=M //479
D=M //480
@SP //481
A=M-1 //482
D=M+D //483
@SP //484
A=M-1 //485
M=D //486
// return
@LCL //487
D=M //488
@FRAME //489
M=D //490
@5 //491
A=D-A //RET=*(FRAME-5) //492
D=M //493
@RET //return address 126?
M=D //494
@SP //495
M=M-1 //496
A=M //497
D=M //498
@ARG //499
A=M //500
M=D //501
@ARG //502
D=M+1 //503
@SP //504
M=D //505
@FRAME //506
D=M //507
@1 //508
A=D-A //509
D=M //510
@THAT //511
M=D //512
@FRAME //513
D=M //514
@2 //515
A=D-A //516
D=M //517
@THIS //518
M=D //519
@FRAME //520
D=M //521
@3 //522
A=D-A //523
D=M //524
@ARG //525
M=D //526
@FRAME //527
D=M //528
@4 //529
A=D-A //530
D=M //531
@LCL //532
M=D //533
@RET //534
A=M //535
0;JMP //536
// function Sys.add12 0
(Sys.add12)
// push constant 4002
@4002 //537
D=A //538
@SP //539
A=M //540
M=D //541
@SP //542
M=M+1 //543
// pop pointer 0
@SP //544
M=M-1 //545
A=M //546
D=M //547
@data //548
M=D //549
@THIS //550
D=A //551
@0 //552
D=D+A //553
@address //554
M=D //555
@data //556
D=M //557
@address //558
A=M //559
M=D //560
// push constant 5002
@5002 //561
D=A //562
@SP //563
A=M //564
M=D //565
@SP //566
M=M+1 //567
// pop pointer 1
@SP //568
M=M-1 //569
A=M //570
D=M //571
@data //572
M=D //573
@THIS //574
D=A //575
@1 //576
D=D+A //577
@address //578
M=D //579
@data //580
D=M //581
@address //582
A=M //583
M=D //584
// push argument 0
@ARG //585
D=M //586
@0 //587
A=D+A //588
D=M //589
@SP //590
A=M //591
M=D //592
@SP //593
M=M+1 //594
// push constant 12
@12 //595
D=A //596
@SP //597
A=M //598
M=D //599
@SP //600
M=M+1 //601
// add
@SP //602
M=M-1 //603
A=M //604
D=M //605
@SP //606
A=M-1 //607
D=M+D //608
@SP //609
A=M-1 //610
M=D //611
// return
@LCL //612
D=M //613
@FRAME //614
M=D //615
@5 //616
A=D-A //RET=*(FRAME-5) //617
D=M //618
@RET //return address 126?
M=D //619
@SP //620
M=M-1 //621
A=M //622
D=M //623
@ARG //624
A=M //625
M=D //626
@ARG //627
D=M+1 //628
@SP //629
M=D //630
@FRAME //631
D=M //632
@1 //633
A=D-A //634
D=M //635
@THAT //636
M=D //637
@FRAME //638
D=M //639
@2 //640
A=D-A //641
D=M //642
@THIS //643
M=D //644
@FRAME //645
D=M //646
@3 //647
A=D-A //648
D=M //649
@ARG //650
M=D //651
@FRAME //652
D=M //653
@4 //654
A=D-A //655
D=M //656
@LCL //657
M=D //658
@RET //659
A=M //660
0;JMP //661
