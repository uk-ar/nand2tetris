@256
D=A
@SP
M=D
@return-address0 //0
D=A //1
@SP //2
A=M //3
M=D //4
@SP //5
M=M+1 //6
@LCL //7
D=M //8
@SP //9
A=M //10
M=D //11
@SP //12
M=M+1 //13
@ARG //14
D=M //15
@SP //16
A=M //17
M=D //18
@SP //19
M=M+1 //20
@THIS //21
D=M //22
@SP //23
A=M //24
M=D //25
@SP //26
M=M+1 //27
@THAT //28
D=M //29
@SP //30
A=M //31
M=D //32
@SP //33
M=M+1 //34
@SP //35
D=M //36
@0 //37
D=D-A //38
@5 //39
D=D-A //ARG=SP-n-5 //40
@ARG //41
M=D //42
@SP //43
D=M //44
@LCL //45
M=D //46
@Sys.init //47
0;JMP //48
(return-address0) //49
// 
// function Main.fibonacci 0
(Main.fibonacci) //50
// push argument 0
@ARG //51
D=M //52
@0 //53
A=D+A //54
D=M //55
@SP //56
A=M //57
M=D //58
@SP //59
M=M+1 //60
// push constant 2
@2 //61
D=A //62
@SP //63
A=M //64
M=D //65
@SP //66
M=M+1 //67
// lt                     // checks if n<2
@result //68
M=-1 //69
@SP //70
M=M-1 //71
A=M //72
D=M //73
@SP //74
A=M-1 //75
D=M-D //76
@SP //77
A=M-1 //78
M=D //79
@true0 //80
D;JLT //81
@result //82
M=0 //83
(true0) //84
@result //85
D=M //86
@SP //87
A=M //88
A=A-1 //89
M=D //90
// if-goto IF_TRUE
@SP //91
M=M-1 //92
A=M //93
D=M //94
@IF_TRUE //95
D;JNE //96
// goto IF_FALSE
@IF_FALSE //97
0;JMP //98
// label IF_TRUE          // if n<2, return n
(IF_TRUE) //99
// push argument 0        
@ARG //100
D=M //101
@0 //102
A=D+A //103
D=M //104
@SP //105
A=M //106
M=D //107
@SP //108
M=M+1 //109
// return
@LCL //110
D=M //111
@FRAME //112
M=D //113
@5 //114
A=D-A //RET=*(FRAME-5) //115
D=M //116
@RET //return address 126?
M=D //117
@SP //118
M=M-1 //119
A=M //120
D=M //121
@ARG //122
A=M //123
M=D //124
@ARG //125
D=M+1 //126
@SP //127
M=D //128
@FRAME //129
D=M //130
@1 //131
A=D-A //132
D=M //133
@THAT //134
M=D //135
@FRAME //136
D=M //137
@2 //138
A=D-A //139
D=M //140
@THIS //141
M=D //142
@FRAME //143
D=M //144
@3 //145
A=D-A //146
D=M //147
@ARG //148
M=D //149
@FRAME //150
D=M //151
@4 //152
A=D-A //153
D=M //154
@LCL //155
M=D //156
@RET //157
A=M //158
0;JMP //159
// label IF_FALSE         // if n>=2, returns fib(n-2)+fib(n-1)
(IF_FALSE) //160
// push argument 0
@ARG //161
D=M //162
@0 //163
A=D+A //164
D=M //165
@SP //166
A=M //167
M=D //168
@SP //169
M=M+1 //170
// push constant 2
@2 //171
D=A //172
@SP //173
A=M //174
M=D //175
@SP //176
M=M+1 //177
// sub
@SP //178
M=M-1 //179
A=M //180
D=M //181
@SP //182
A=M-1 //183
D=M-D //184
@SP //185
A=M-1 //186
M=D //187
// call Main.fibonacci 1  // computes fib(n-2)
@return-address1 //188
D=A //189
@SP //190
A=M //191
M=D //192
@SP //193
M=M+1 //194
@LCL //195
D=M //196
@SP //197
A=M //198
M=D //199
@SP //200
M=M+1 //201
@ARG //202
D=M //203
@SP //204
A=M //205
M=D //206
@SP //207
M=M+1 //208
@THIS //209
D=M //210
@SP //211
A=M //212
M=D //213
@SP //214
M=M+1 //215
@THAT //216
D=M //217
@SP //218
A=M //219
M=D //220
@SP //221
M=M+1 //222
@SP //223
D=M //224
@1 //225
D=D-A //226
@5 //227
D=D-A //ARG=SP-n-5 //228
@ARG //229
M=D //230
@SP //231
D=M //232
@LCL //233
M=D //234
@Main.fibonacci //235
0;JMP //236
(return-address1) //237
// push argument 0
@ARG //238
D=M //239
@0 //240
A=D+A //241
D=M //242
@SP //243
A=M //244
M=D //245
@SP //246
M=M+1 //247
// push constant 1
@1 //248
D=A //249
@SP //250
A=M //251
M=D //252
@SP //253
M=M+1 //254
// sub
@SP //255
M=M-1 //256
A=M //257
D=M //258
@SP //259
A=M-1 //260
D=M-D //261
@SP //262
A=M-1 //263
M=D //264
// call Main.fibonacci 1  // computes fib(n-1)
@return-address2 //265
D=A //266
@SP //267
A=M //268
M=D //269
@SP //270
M=M+1 //271
@LCL //272
D=M //273
@SP //274
A=M //275
M=D //276
@SP //277
M=M+1 //278
@ARG //279
D=M //280
@SP //281
A=M //282
M=D //283
@SP //284
M=M+1 //285
@THIS //286
D=M //287
@SP //288
A=M //289
M=D //290
@SP //291
M=M+1 //292
@THAT //293
D=M //294
@SP //295
A=M //296
M=D //297
@SP //298
M=M+1 //299
@SP //300
D=M //301
@1 //302
D=D-A //303
@5 //304
D=D-A //ARG=SP-n-5 //305
@ARG //306
M=D //307
@SP //308
D=M //309
@LCL //310
M=D //311
@Main.fibonacci //312
0;JMP //313
(return-address2) //314
// add                    // returns fib(n-1) + fib(n-2)
@SP //315
M=M-1 //316
A=M //317
D=M //318
@SP //319
A=M-1 //320
D=M+D //321
@SP //322
A=M-1 //323
M=D //324
// return
@LCL //325
D=M //326
@FRAME //327
M=D //328
@5 //329
A=D-A //RET=*(FRAME-5) //330
D=M //331
@RET //return address 126?
M=D //332
@SP //333
M=M-1 //334
A=M //335
D=M //336
@ARG //337
A=M //338
M=D //339
@ARG //340
D=M+1 //341
@SP //342
M=D //343
@FRAME //344
D=M //345
@1 //346
A=D-A //347
D=M //348
@THAT //349
M=D //350
@FRAME //351
D=M //352
@2 //353
A=D-A //354
D=M //355
@THIS //356
M=D //357
@FRAME //358
D=M //359
@3 //360
A=D-A //361
D=M //362
@ARG //363
M=D //364
@FRAME //365
D=M //366
@4 //367
A=D-A //368
D=M //369
@LCL //370
M=D //371
@RET //372
A=M //373
0;JMP //374
// 
// function Sys.init 0
(Sys.init) //375
// push constant 4
@4 //376
D=A //377
@SP //378
A=M //379
M=D //380
@SP //381
M=M+1 //382
// call Main.fibonacci 1   // computes the 4'th fibonacci element
@return-address3 //383
D=A //384
@SP //385
A=M //386
M=D //387
@SP //388
M=M+1 //389
@LCL //390
D=M //391
@SP //392
A=M //393
M=D //394
@SP //395
M=M+1 //396
@ARG //397
D=M //398
@SP //399
A=M //400
M=D //401
@SP //402
M=M+1 //403
@THIS //404
D=M //405
@SP //406
A=M //407
M=D //408
@SP //409
M=M+1 //410
@THAT //411
D=M //412
@SP //413
A=M //414
M=D //415
@SP //416
M=M+1 //417
@SP //418
D=M //419
@1 //420
D=D-A //421
@5 //422
D=D-A //ARG=SP-n-5 //423
@ARG //424
M=D //425
@SP //426
D=M //427
@LCL //428
M=D //429
@Main.fibonacci //430
0;JMP //431
(return-address3) //432
// label WHILE
(WHILE) //433
// goto WHILE              // loops infinitely
@WHILE //434
0;JMP //435
